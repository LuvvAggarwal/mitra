generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model addresses {
//   id         String   @id @db.Uuid
//   number     BigInt   @default(autoincrement())
//   active     Boolean  @default(true)
//   created_on DateTime @default(now()) @db.Timestamp(6)
//   updated_on DateTime @default(now()) @db.Timestamp(6)
//   street     String   @db.VarChar(150)
//   pin_code   Int?
//   city       String   @db.Uuid
//   cities     cities   @relation(fields: [city], references: [id])
//   users      users[]
// }

enum Attachment_Type {
  IMAGE
  VIDEO
  EXCEL
  DOC
  PDF
}

model atachment_post_map {
  id         String          @id @db.Uuid
  number     BigInt          @default(autoincrement())
  active     Boolean         @default(true)
  created_on DateTime        @default(now()) @db.Timestamp(6)
  updated_on DateTime        @default(now()) @db.Timestamp(6)
  type       Attachment_Type @default(IMAGE)
  post       String          @db.Uuid
  url        String
  posts      posts           @relation(fields: [post], references: [id])
}

model cities {
  id         String   @id @db.Uuid
  number     BigInt   @default(autoincrement())
  active     Boolean  @default(true)
  created_on DateTime @default(now()) @db.Timestamp(6)
  updated_on DateTime @default(now()) @db.Timestamp(6)
  name       String   @db.VarChar(150)
  state_id   String   @db.Uuid
  states     states   @relation(fields: [state_id], references: [id])
  users      users[]
  // addresses  addresses[]
}

model comment_post {
  id         String   @id @db.Uuid
  number     BigInt   @default(autoincrement())
  active     Boolean  @default(true)
  created_on DateTime @default(now()) @db.Timestamp(6)
  updated_on DateTime @default(now()) @db.Timestamp(6)
  post       String   @db.Uuid
  user_id    String   @db.Uuid
  comment    String
  posts      posts    @relation(fields: [post], references: [id])
  users      users    @relation(fields: [user_id], references: [id])
}

model countries {
  id         String   @id @db.Uuid
  number     BigInt   @default(autoincrement())
  active     Boolean  @default(true)
  created_on DateTime @default(now()) @db.Timestamp(6)
  updated_on DateTime @default(now()) @db.Timestamp(6)
  shortname  String   @db.VarChar(3)
  name       String   @db.VarChar(150)
  phonecode  Int
  states     states[]
}

model events {
  id            String          @id @db.Uuid
  number        BigInt          @default(autoincrement())
  active        Boolean         @default(true)
  created_on    DateTime        @default(now()) @db.Timestamp(6)
  updated_on    DateTime        @default(now()) @db.Timestamp(6)
  name          String          @db.VarChar(150)
  message       String
  notifications notifications[]
}

model follower_following {
  id              String   @id @db.Uuid
  number          BigInt   @default(autoincrement())
  active          Boolean  @default(true)
  created_on      DateTime @default(now()) @db.Timestamp(6)
  updated_on      DateTime @default(now()) @db.Timestamp(6)
  follower        String   @db.Uuid
  following       String   @db.Uuid
  follower_users  users    @relation("follower_following_followerTousers", fields: [follower], references: [id])
  following_users users    @relation("follower_following_followingTousers", fields: [following], references: [id])
}

model group_member_map {
  id         String             @id @db.Uuid
  number     BigInt             @default(autoincrement())
  active     Boolean            @default(true)
  created_on DateTime           @default(now()) @db.Timestamp(6)
  updated_on DateTime           @default(now()) @db.Timestamp(6)
  group_id   String             @db.Uuid
  user_id    String             @db.Uuid
  is_admin   Boolean
  groups     groups             @relation(fields: [group_id], references: [id])
  users      users              @relation(fields: [user_id], references: [id])
  req        group_member_req[]
}

model group_member_req {
  id                String            @id @db.Uuid
  number            BigInt            @default(autoincrement())
  active            Boolean           @default(true)
  created_on        DateTime          @default(now()) @db.Timestamp(6)
  updated_on        DateTime          @default(now()) @db.Timestamp(6)
  group_id          String            @db.Uuid
  request_sender    String            @db.Uuid
  request_reciever  String            @db.Uuid
  is_acceptor_admin Boolean
  request_accepted  Boolean
  member_id         String?            @db.Uuid
  member            group_member_map? @relation(fields: [member_id], references: [id])
  groups            groups            @relation(fields: [group_id], references: [id])
  req_acceptor      users             @relation("group_member_req_request_recieverTousers", fields: [request_reciever], references: [id])
  req_sender        users             @relation("group_member_req_request_senderTousers", fields: [request_sender], references: [id])
}

model groups {
  id               String             @id @db.Uuid
  number           BigInt             @default(autoincrement())
  active           Boolean            @default(true)
  created_on       DateTime           @default(now()) @db.Timestamp(6)
  updated_on       DateTime           @default(now()) @db.Timestamp(6)
  group_id         String             @unique @db.VarChar(100)
  name             String             @db.VarChar(150)
  problem_category String             @db.Uuid
  ph_number        String?            @unique
  email            String?            @unique @db.VarChar(150)
  profile_photo    String?
  cover_photo      String?
  bio              String?            @unique
  visibility       Visibility         @default(FRIENDS)
  created_by       String             @db.Uuid
  updated_by       String             @db.Uuid
  created_by_user  users              @relation("groups_created_byTousers", fields: [created_by], references: [id])
  problem          problem_category   @relation(fields: [problem_category], references: [id])
  updated_by_user  users              @relation("groups_updated_byTousers", fields: [updated_by], references: [id])
  group_member_map group_member_map[]
  group_member_req group_member_req[]
  posts            posts[]
}

model help_type {
  id          String   @id @db.Uuid
  number      BigInt   @default(autoincrement())
  active      Boolean  @default(true)
  created_on  DateTime @default(now()) @db.Timestamp(6)
  updated_on  DateTime @default(now()) @db.Timestamp(6)
  name        String   @db.VarChar(150)
  description String
  users       users[]
}

model like_post {
  id         String   @id @db.Uuid
  number     BigInt   @default(autoincrement())
  active     Boolean  @default(true)
  created_on DateTime @default(now()) @db.Timestamp(6)
  updated_on DateTime @default(now()) @db.Timestamp(6)
  post       String   @db.Uuid
  user_id    String   @db.Uuid
  posts      posts    @relation(fields: [post], references: [id])
  users      users    @relation(fields: [user_id], references: [id])
}

model notifications {
  id             String   @id @db.Uuid
  number         BigInt   @default(autoincrement())
  active         Boolean  @default(true)
  created_on     DateTime @default(now()) @db.Timestamp(6)
  updated_on     DateTime @default(now()) @db.Timestamp(6)
  event          String   @db.Uuid
  sender         String   @db.Uuid
  recipient      String   @db.Uuid
  message        String
  seen           Boolean
  events         events   @relation(fields: [event], references: [id])
  recipient_user users    @relation("notifications_recipientTousers", fields: [recipient], references: [id])
  sender_user    users    @relation("notifications_senderTousers", fields: [sender], references: [id])
}

enum Post {
  TEXT
  MULTIMEDIA
  DOCUMENT
}

model posts {
  id          String               @id @db.Uuid
  number      BigInt               @default(autoincrement())
  active      Boolean              @default(true)
  created_on  DateTime             @default(now()) @db.Timestamp(6)
  updated_on  DateTime             @default(now()) @db.Timestamp(6)
  type        Post                 @default(TEXT)
  title       String               @db.VarChar(200)
  description String
  keyword     String?
  // visibility  String               @db.VarChar(10)
  group_id    String?              @db.Uuid
  user_id     String?              @db.Uuid
  approved    Boolean?
  visibility  Visibility
  groups      groups?              @relation(fields: [group_id], references: [id])
  users       users?               @relation(fields: [user_id], references: [id])
  atachments  atachment_post_map[]
  comments    comment_post[]
  likes       like_post[]
  shares      share_post[]
}

model problem_category {
  id                String              @id @db.Uuid
  number            BigInt              @default(autoincrement())
  active            Boolean             @default(true)
  created_on        DateTime            @default(now()) @db.Timestamp(6)
  updated_on        DateTime            @default(now()) @db.Timestamp(6)
  name              String              @db.VarChar(150)
  description       String
  groups            groups[]
  special_achievers special_achievers[]
  users             users[]
}

model share_post {
  id         String   @id @db.Uuid
  number     BigInt   @default(autoincrement())
  active     Boolean  @default(true)
  created_on DateTime @default(now()) @db.Timestamp(6)
  updated_on DateTime @default(now()) @db.Timestamp(6)
  post       String   @db.Uuid
  user_id    String   @db.Uuid
  shared_on  String   @db.VarChar(50)
  share_link String
  posts      posts    @relation(fields: [post], references: [id])
  users      users    @relation(fields: [user_id], references: [id])
}

model special_achievers {
  id               String           @id @db.Uuid
  number           BigInt           @default(autoincrement())
  active           Boolean          @default(true)
  created_on       DateTime         @default(now()) @db.Timestamp(6)
  updated_on       DateTime         @default(now()) @db.Timestamp(6)
  first_name       String           @db.VarChar(100)
  middle_name      String?          @db.VarChar(100)
  last_name        String           @db.VarChar(100)
  achievement      String
  problem_category String           @db.Uuid
  problem          problem_category @relation(fields: [problem_category], references: [id])
}

model states {
  id         String    @id @db.Uuid
  number     BigInt    @default(autoincrement())
  active     Boolean   @default(true)
  created_on DateTime  @default(now()) @db.Timestamp(6)
  updated_on DateTime  @default(now()) @db.Timestamp(6)
  name       String    @db.VarChar(150)
  country_id String    @db.Uuid
  country    countries @relation(fields: [country_id], references: [id])
  cities     cities[]
}

enum User_Type {
  USER
  NGO
  COUNSALER
}

enum Visibility {
  PUBLIC
  PRIVATE
  FRIENDS
}

enum Theme {
  LIGHT
  DARK
}

enum Notifcation {
  IMPORTANT
  STANDARD
  NO_NOTIFICATION
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model users {
  id                       String               @id @db.Uuid
  number                   BigInt               @default(autoincrement())
  active                   Boolean              @default(true)
  created_on               DateTime             @default(now()) @db.Timestamp(6)
  updated_on               DateTime             @default(now()) @db.Timestamp(6)
  user_id                  String               @unique @db.VarChar(100)
  type                     User_Type
  first_name               String?              @default("") @db.VarChar(100)
  middle_name              String?              @default("") @db.VarChar(100)
  last_name                String?              @default("") @db.VarChar(100)
  name                     String?              @default("") @db.VarChar(250)
  gender                   Gender?              @default(MALE)
  occupation               String?              @default("") @db.VarChar(100)
  experience               Int?                 @default(0)
  problem_category         String               @db.Uuid
  registration_code        String?              @db.VarChar(100)
  help_type                String?              @db.Uuid
  ph_number                String?              @unique @db.VarChar(15)
  email                    String?              @unique @db.VarChar(150)
  password                 String
  profile_photo            String?              @default("") @db.VarChar(200)
  cover_photo              String?              @default("") @db.VarChar(200)
  bio                      String?              @default("") @db.VarChar(200)
  address                  String?              @default("") @db.VarChar(200)
  city                     String?              @db.Uuid
  last_login               DateTime?            @db.Timestamp(6)
  access_token             String?
  visibility               Visibility           @default(FRIENDS)
  theme                    Theme                @default(LIGHT)
  notification             Notifcation          @default(STANDARD)
  user_city                cities?              @relation(fields: [city], references: [id])
  help                     help_type?           @relation(fields: [help_type], references: [id])
  problem                  problem_category     @relation(fields: [problem_category], references: [id])
  comments_by_user         comment_post[]
  following                follower_following[] @relation("follower_following_followerTousers")
  followers                follower_following[] @relation("follower_following_followingTousers")
  groups                   group_member_map[]
  group_join_req_to_accept group_member_req[]   @relation("group_member_req_request_recieverTousers")
  req_to_join_groups       group_member_req[]   @relation("group_member_req_request_senderTousers")
  groups_created           groups[]             @relation("groups_created_byTousers")
  groups_updated           groups[]             @relation("groups_updated_byTousers")
  likes_by_user            like_post[]
  notifications_recieved   notifications[]      @relation("notifications_recipientTousers")
  notifications_sent       notifications[]      @relation("notifications_senderTousers")
  posts                    posts[]
  share_post               share_post[]
  // addresses                                                 addresses?           @relation(fields: [addressesId], references: [id])
  // addressesId                                               String?
}
